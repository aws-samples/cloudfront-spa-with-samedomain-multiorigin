{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport config from '../assets/config.json';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let GetDataService = /*#__PURE__*/(() => {\n  class GetDataService {\n    constructor(http) {\n      this.http = http;\n      this.dataUrl = config.apiGwUrl;\n      this.dataCfUrl = '/api/prod';\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n    getData() {\n      console.log(\"getting data\");\n      return this.http.get(this.dataUrl, this.httpOptions).pipe(catchError(this.handleError));\n    }\n    getCfData() {\n      console.log(\"getting data\");\n      return this.http.get(this.dataCfUrl, this.httpOptions).pipe(catchError(this.handleError));\n    }\n    handleError(error) {\n      console.log(\"error\");\n      if (error.status === 0) {\n        // A client-side or network error occurred. Handle it accordingly.\n        console.error('An error occurred:', error.error);\n      } else {\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong.\n        console.error(`Backend returned code ${error.status}, body was: `, error.error);\n      }\n      // Return an observable with a user-facing error message.\n      return throwError(() => new Error('Something bad happened; please try again later.'));\n    }\n  }\n  GetDataService.ɵfac = function GetDataService_Factory(t) {\n    return new (t || GetDataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  GetDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GetDataService,\n    factory: GetDataService.ɵfac,\n    providedIn: 'root'\n  });\n  return GetDataService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}